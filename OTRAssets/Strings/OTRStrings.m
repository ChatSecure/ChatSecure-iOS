// DO NOT EDIT THIS FILE. EDIT strings.json then run python StringsConverter.py

#import "OTRStrings.h"
#import "OTRLanguageManager_Private.h"
/** "About", Title for the about page */
NSString* ABOUT_STRING() { return [OTRLanguageManager translatedString:@"About"]; }
/** "About This Version", Label for button to show version numbers and licenses */
NSString* ABOUT_VERSION_STRING() { return [OTRLanguageManager translatedString:@"About This Version"]; }
/** "Accounts", Title for the accounts tab */
NSString* ACCOUNTS_STRING() { return [OTRLanguageManager translatedString:@"Accounts"]; }
/** "Account", The string describing a buddy's account */
NSString* ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Account"]; }
/** "Active", segmented control value for active friends */
NSString* ACTIVE_BUDDIES_STRING() { return [OTRLanguageManager translatedString:@"Active"]; }
/** "Active", This will be displayed in the UI as 'Active 10m ago'  */
NSString* ACTIVE_STRING() { return [OTRLanguageManager translatedString:@"Active"]; }
/** "Add Buddy", The title for the view to add a buddy */
NSString* ADD_BUDDY_STRING() { return [OTRLanguageManager translatedString:@"Add Buddy"]; }
/** "Add Existing Account", Label for button to create account by logging into an existing account */
NSString* ADD_EXISTING_STRING() { return [OTRLanguageManager translatedString:@"Add Existing Account"]; }
/** "Is %@ your friend? Add him/her to auto-download pictures in the future.", Shown in chat view to prompt user to add friend for auto-download of group media messages. */
NSString* ADD_FRIEND_TO_AUTO_DOWNLOAD() { return [OTRLanguageManager translatedString:@"Is %@ your friend? Add him/her to auto-download pictures in the future."]; }
/** "Add", Button title to add someone as a buddy */
NSString* ADD_STRING() { return [OTRLanguageManager translatedString:@"Add"]; }
/** "Advanced", String to describe advanced set of settings */
NSString* ADVANCED_STRING() { return [OTRLanguageManager translatedString:@"Advanced"]; }
/** "Restore iTunes backups to new devices", Description for allowing DB passphrase backup */
NSString* ALLOW_DB_PASSPHRASE_BACKUP_DESCRIPTION_STRING() { return [OTRLanguageManager translatedString:@"Restore iTunes backups to new devices"]; }
/** "Allow Device Migration", Title for allowing DB passphrase backup */
NSString* ALLOW_DB_PASSPHRASE_BACKUP_TITLE_STRING() { return [OTRLanguageManager translatedString:@"Allow Device Migration"]; }
/** "Archive", Verb. action for archiving an old conversation */
NSString* ARCHIVE_ACTION_STRING() { return [OTRLanguageManager translatedString:@"Archive"]; }
/** "Archive", Noun. segmented control value for displaying archived conversations */
NSString* ARCHIVE_STRING() { return [OTRLanguageManager translatedString:@"Archive"]; }
/** "Are you sure?", Shown to confirm destructive actions */
NSString* ARE_YOU_SURE_STRING() { return [OTRLanguageManager translatedString:@"Are you sure?"]; }
/** "Audio Message", Text for media message summary */
NSString* AUDIO_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Audio Message"]; }
/** "Automatic Downloads Disabled", error */
NSString* AUTOMATIC_DOWNLOADS_DISABLED_STRING() { return [OTRLanguageManager translatedString:@"Automatic Downloads Disabled"]; }
/** "Automatically Fetch Media", Title for other miscellaneous settings group */
NSString* AUTO_URL_FETCH_STRING() { return [OTRLanguageManager translatedString:@"Automatically Fetch Media"]; }
/** "All incoming messages containing URLs will be fetched by default to show a media preview. This is required for media messaging to work properly. Disable this if you do not trust your contacts.", Title for other miscellaneous settings group */
NSString* AUTO_URL_FETCH_WARNING_STRING() { return [OTRLanguageManager translatedString:@"All incoming messages containing URLs will be fetched by default to show a media preview. This is required for media messaging to work properly. Disable this if you do not trust your contacts."]; }
/** "Available", Label in buddy list for users that are available */
NSString* AVAILABLE_STRING() { return [OTRLanguageManager translatedString:@"Available"]; }
/** "Away", Label in buddy list for users that are away */
NSString* AWAY_STRING() { return [OTRLanguageManager translatedString:@"Away"]; }
/** "Don't change these unless you really know what you're doing. By default we will always select the best available encryption method.",  */
NSString* Advanced_Crypto_Warning() { return [OTRLanguageManager translatedString:@"Don't change these unless you really know what you're doing. By default we will always select the best available encryption method."]; }
/** "Advanced Encryption Settings",  */
NSString* Advanced_Encryption_Settings() { return [OTRLanguageManager translatedString:@"Advanced Encryption Settings"]; }
/** "Basic", string to describe basic set of settings */
NSString* BASIC_STRING() { return [OTRLanguageManager translatedString:@"Basic"]; }
/** "Block & Remove", The String for a buddy to block and remove a buddy from the buddy list */
NSString* BLOCK_AND_REMOVE_STRING() { return [OTRLanguageManager translatedString:@"Block & Remove"]; }
/** "Block", The String for a button to block a buddy */
NSString* BLOCK_STRING() { return [OTRLanguageManager translatedString:@"Block"]; }
/** "You and %@ are now friends.", Notification message when buddy has approved you */
NSString* BUDDY_APPROVED_STRING() { return [OTRLanguageManager translatedString:@"You and %@ are now friends."]; }
/** "Buddy Info", The title for the view that shows detailed buddy info */
NSString* BUDDY_INFO_STRING() { return [OTRLanguageManager translatedString:@"Buddy Info"]; }
/** "Basic Setup", username section */
NSString* Basic_Setup() { return [OTRLanguageManager translatedString:@"Basic Setup"]; }
/** "Think of a unique nickname that you don't use anywhere else and doesn't contain personal information.", basic setup selection footer */
NSString* Basic_Setup_Hint() { return [OTRLanguageManager translatedString:@"Think of a unique nickname that you don't use anywhere else and doesn't contain personal information."]; }
/** "Best Available",  */
NSString* Best_Available() { return [OTRLanguageManager translatedString:@"Best Available"]; }
/** "Cancel", Cancel an alert window */
NSString* CANCEL_STRING() { return [OTRLanguageManager translatedString:@"Cancel"]; }
/** "ChatSecure Push", Title for ChatSecure Push (this probably doesnt need to be translated) */
NSString* CHATSECURE_PUSH_STRING() { return [OTRLanguageManager translatedString:@"ChatSecure Push"]; }
/** "Chats", Title for chats view */
NSString* CHATS_STRING() { return [OTRLanguageManager translatedString:@"Chats"]; }
/** "Chat", Title for chat view */
NSString* CHAT_STRING() { return [OTRLanguageManager translatedString:@"Chat"]; }
/** "Compose", Label for text field where you compose a new message */
NSString* COMPOSE_STRING() { return [OTRLanguageManager translatedString:@"Compose"]; }
/** "Connected", Whether or not account is logged in */
NSString* CONNECTED_STRING() { return [OTRLanguageManager translatedString:@"Connected"]; }
/** "Connecting", String to state if an account is progress of creating a connection */
NSString* CONNECTING_STRING() { return [OTRLanguageManager translatedString:@"Connecting"]; }
/** "Connecting to Tor", Message shown when connecting to the Tor network */
NSString* CONNECTING_TO_TOR_STRING() { return [OTRLanguageManager translatedString:@"Connecting to Tor"]; }
/** "Please re-verify the server's certificate.", alert title for connection errors */
NSString* CONNECTION_ERROR_CERTIFICATE_VERIFY_STRING() { return [OTRLanguageManager translatedString:@"Please re-verify the server's certificate."]; }
/** "There was an error connecting to account", alert title for connection errors */
NSString* CONNECTION_ERROR_STRING() { return [OTRLanguageManager translatedString:@"There was an error connecting to account"]; }
/** "Connect", String for button to connect connect */
NSString* CONNECT_STRING() { return [OTRLanguageManager translatedString:@"Connect"]; }
/** "Copy Link", Copy link URL to clipboard as in copy and paste */
NSString* COPY_LINK_STRING() { return [OTRLanguageManager translatedString:@"Copy Link"]; }
/** "Copy", Copy string to clipboard as in copy and paste */
NSString* COPY_STRING() { return [OTRLanguageManager translatedString:@"Copy"]; }
/** "Could not parse URL.", Error description */
NSString* COULD_NOT_PARSE_URL_STRING() { return [OTRLanguageManager translatedString:@"Could not parse URL."]; }
/** "Created by", Start of sentence that will be followed by names */
NSString* CREATED_BY_STRING() { return [OTRLanguageManager translatedString:@"Created by"]; }
/** "Create New Account", Label for button to create a new account via in band registration */
NSString* CREATE_NEW_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Create New Account"]; }
/** "Create", Title for button to create account */
NSString* CREATE_STRING() { return [OTRLanguageManager translatedString:@"Create"]; }
/** "Creating Account", Title for progress of creating a new account */
NSString* CREATING_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Creating Account"]; }
/** "Custom", Place holder label for custom domains */
NSString* CUSTOM_STRING() { return [OTRLanguageManager translatedString:@"Custom"]; }
/** "Choose Server", title for server selection screen */
NSString* Choose_Server_String() { return [OTRLanguageManager translatedString:@"Choose Server"]; }
/** "Could not decrypt database. If the app is not working properly, you may need to delete and reinstall.",  */
NSString* Could_Not_Decrypt_Database() { return [OTRLanguageManager translatedString:@"Could not decrypt database. If the app is not working properly, you may need to delete and reinstall."]; }
/** "The app crashed last time it was launched. Send a crash report?",  */
NSString* Crash_Detected_Message() { return [OTRLanguageManager translatedString:@"The app crashed last time it was launched. Send a crash report?"]; }
/** "Crash Detected",  */
NSString* Crash_Detected_Title() { return [OTRLanguageManager translatedString:@"Crash Detected"]; }
/** "Customize Username", if you want to change your username */
NSString* Customize_Username() { return [OTRLanguageManager translatedString:@"Customize Username"]; }
/** "Deactivate", e.g. for deactivating your push account */
NSString* DEACTIVATE_STRING() { return [OTRLanguageManager translatedString:@"Deactivate"]; }
/** "Delete Account", Button to delete account */
NSString* DELETE_ACCOUNT_BUTTON_STRING() { return [OTRLanguageManager translatedString:@"Delete Account"]; }
/** "Permanently delete", Ask user if they want to delete the stored account information */
NSString* DELETE_ACCOUNT_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Permanently delete"]; }
/** "Delete Account?", Ask user if they want to delete the stored account information */
NSString* DELETE_ACCOUNT_TITLE_STRING() { return [OTRLanguageManager translatedString:@"Delete Account?"]; }
/** "Delete chats on disconnect", Description for automatic conversation deletion */
NSString* DELETE_CONVERSATIONS_ON_DISCONNECT_DESCRIPTION_STRING() { return [OTRLanguageManager translatedString:@"Delete chats on disconnect"]; }
/** "Auto-delete", Title for automatic conversation deletion setting */
NSString* DELETE_CONVERSATIONS_ON_DISCONNECT_TITLE_STRING() { return [OTRLanguageManager translatedString:@"Auto-delete"]; }
/** "Delete", action button for deleting something */
NSString* DELETE_STRING() { return [OTRLanguageManager translatedString:@"Delete"]; }
/** "Delivered", Shows in the chat view when a message has been delivered */
NSString* DELIVERED_STRING() { return [OTRLanguageManager translatedString:@"Delivered"]; }
/** "Did you know you can now help fund future development directly within the app?", prompt users to donate money */
NSString* DID_YOU_KNOW_DONATION_STRING() { return [OTRLanguageManager translatedString:@"Did you know you can now help fund future development directly within the app?"]; }
/** "Your donation will help fund the continued development of ChatSecure.", Message shown when about to donate */
NSString* DONATE_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Your donation will help fund the continued development of ChatSecure."]; }
/** "Donate", Title for donation link */
NSString* DONATE_STRING() { return [OTRLanguageManager translatedString:@"Donate"]; }
/** "Done", Title for button to press when user is finished */
NSString* DONE_STRING() { return [OTRLanguageManager translatedString:@"Done"]; }
/** "Download", Title for button to download something */
NSString* DOWNLOAD_STRING() { return [OTRLanguageManager translatedString:@"Download"]; }
/** "Do Not Disturb", Default message when a user status is set to do not disturb */
NSString* DO_NOT_DISTURB_STRING() { return [OTRLanguageManager translatedString:@"Do Not Disturb"]; }
/** "Database Error",  */
NSString* Database_Error_String() { return [OTRLanguageManager translatedString:@"Database Error"]; }
/** "Edit Account", Button to edit account details */
NSString* EDIT_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Edit Account"]; }
/** "Email", The string describing account name or email address for a buddy */
NSString* EMAIL_STRING() { return [OTRLanguageManager translatedString:@"Email"]; }
/** "Beware! These logs are for debugging purposes only and will contain sensitive material like usernames, passwords, contacts, and message history. Disabling this option will delete all existing logs.", extra information about debug logging */
NSString* ENABLE_DEBUG_LOGGING_HELP_STRING() { return [OTRLanguageManager translatedString:@"Beware! These logs are for debugging purposes only and will contain sensitive material like usernames, passwords, contacts, and message history. Disabling this option will delete all existing logs."]; }
/** "Enable Debug Logging", switch label for toggling debug logs */
NSString* ENABLE_DEBUG_LOGGING_STRING() { return [OTRLanguageManager translatedString:@"Enable Debug Logging"]; }
/** "Enable Push in Settings", button for enabling push messages in iOS system settings */
NSString* ENABLE_PUSH_IN_SETTINGS_STRING() { return [OTRLanguageManager translatedString:@"Enable Push in Settings"]; }
/** "Enable Push", button for enabling push messages */
NSString* ENABLE_PUSH_STRING() { return [OTRLanguageManager translatedString:@"Enable Push"]; }
/** "Encryption Error", Generic title for encryption errors */
NSString* ENCRYPTION_ERROR_STRING() { return [OTRLanguageManager translatedString:@"Encryption Error"]; }
/** "Enter a group name", The placeholder text for the text field to enter a group chat name or label */
NSString* ENTER_GROUP_NAME_STRING() { return [OTRLanguageManager translatedString:@"Enter a group name"]; }
/** "Error Creating Account", title label for error when creating account */
NSString* ERROR_CREATING_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Error Creating Account"]; }
/** "Error", Title of error message pop-up box */
NSString* ERROR_STRING() { return [OTRLanguageManager translatedString:@"Error"]; }
/** "Experimental", Section for experimental settings */
NSString* EXPERIMENTAL_STRING() { return [OTRLanguageManager translatedString:@"Experimental"]; }
/** "Extended Away", Default message when a user status is set to extended away */
NSString* EXTENDED_AWAY_STRING() { return [OTRLanguageManager translatedString:@"Extended Away"]; }
/** "Enable", enable permission */
NSString* Enable_String() { return [OTRLanguageManager translatedString:@"Enable"]; }
/** "Enable Tor",  */
NSString* Enable_Tor_String() { return [OTRLanguageManager translatedString:@"Enable Tor"]; }
/** "Facebook", the name for facebook */
NSString* FACEBOOK_STRING() { return [OTRLanguageManager translatedString:@"Facebook"]; }
/** "File exceeds maximum size.", Error string for when file is too big. */
NSString* FILE_EXCEEDS_MAX_SIZE_STRING() { return [OTRLanguageManager translatedString:@"File exceeds maximum size."]; }
/** "File Message", Text for file message summary */
NSString* FILE_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"File Message"]; }
/** "File not found.", Error */
NSString* FILE_NOT_FOUND_STRING() { return [OTRLanguageManager translatedString:@"File not found."]; }
/** "Fix Background Fetch...", prompt to fix background fetch */
NSString* FIX_BACKGROUND_FETCH_STRING() { return [OTRLanguageManager translatedString:@"Fix Background Fetch..."]; }
/** "Fix Permissions...", prompt to fix permissions */
NSString* FIX_PERMISSIONS_STRING() { return [OTRLanguageManager translatedString:@"Fix Permissions..."]; }
/** "Because the database contents is encrypted with your passphrase, you've lost access to your data and will need to delete and reinstall ChatSecure to continue. Password managers like 1Password or MiniKeePass can be helpful for generating and storing strong passwords.", Text describing what happens when the user has forgotten the passphrase */
NSString* FORGOT_PASSPHRASE_INFO_STRING() { return [OTRLanguageManager translatedString:@"Because the database contents is encrypted with your passphrase, you've lost access to your data and will need to delete and reinstall ChatSecure to continue. Password managers like 1Password or MiniKeePass can be helpful for generating and storing strong passwords."]; }
/** "Forgot Passphrase?", Label for button when you've forgotten the passphrase */
NSString* FORGOT_PASSPHRASE_STRING() { return [OTRLanguageManager translatedString:@"Forgot Passphrase?"]; }
/** "GitHub", Name of popular web based hosting service */
NSString* GITHUB_STRING() { return [OTRLanguageManager translatedString:@"GitHub"]; }
/** "Google Talk", the name for Google talk */
NSString* GOOGLE_TALK_STRING() { return [OTRLanguageManager translatedString:@"Google Talk"]; }
/** "Group Chat", a subtitle label for a group chat */
NSString* GROUP_CHAT_STRING() { return [OTRLanguageManager translatedString:@"Group Chat"]; }
/** "Make Admin", Label for granting admin privileges to someone in a group */
NSString* GROUP_GRANT_ADMIN_STRING() { return [OTRLanguageManager translatedString:@"Make Admin"]; }
/** "you", This will be shown after your own JID in the group profile view */
NSString* GROUP_INFO_YOU() { return [OTRLanguageManager translatedString:@"you"]; }
/** "Group Name", The title for the view to enter a group chat name or label */
NSString* GROUP_NAME_STRING() { return [OTRLanguageManager translatedString:@"Group Name"]; }
/** "Kick Out", Label for revoking membership for someone in a group */
NSString* GROUP_REVOKE_MEMBERSHIP_STRING() { return [OTRLanguageManager translatedString:@"Kick Out"]; }
/** "Generate Secure Password", whether or not we should generate a strong password for them */
NSString* Generate_Secure_Password() { return [OTRLanguageManager translatedString:@"Generate Secure Password"]; }
/** "We can automatically generate you a secure password. If you choose your own, make sure it's a unique password you don't use anywhere else.", help text for password generator */
NSString* Generate_Secure_Password_Hint() { return [OTRLanguageManager translatedString:@"We can automatically generate you a secure password. If you choose your own, make sure it's a unique password you don't use anywhere else."]; }
/** "Help Translate", Label for button to open link to translate app */
NSString* HELP_TRANSLATE_STRING() { return [OTRLanguageManager translatedString:@"Help Translate"]; }
/** "Hold to talk", Label for button to hold to record audio */
NSString* HOLD_TO_TALK_STRING() { return [OTRLanguageManager translatedString:@"Hold to talk"]; }
/** "Hostname", Label text for hostname field on login scree */
NSString* HOSTNAME_STRING() { return [OTRLanguageManager translatedString:@"Hostname"]; }
/** "Inbox", segmented control value for active conversations */
NSString* INBOX_STRING() { return [OTRLanguageManager translatedString:@"Inbox"]; }
/** "Incoming", Label for incoming data transfers */
NSString* INCOMING_STRING() { return [OTRLanguageManager translatedString:@"Incoming"]; }
/** "Info", Short for information, button title to get more information */
NSString* INFO_STRING() { return [OTRLanguageManager translatedString:@"Info"]; }
/** "Please choose a valid email address", detail title label for invalid email */
NSString* INVALID_EMAIL_DETAIL_STRING() { return [OTRLanguageManager translatedString:@"Please choose a valid email address"]; }
/** "Invalid Email", title label for invalid email */
NSString* INVALID_EMAIL_TITLE_STRING() { return [OTRLanguageManager translatedString:@"Invalid Email"]; }
/** "Invite Friends", Button to invite friends */
NSString* INVITE_FRIENDS_STRING() { return [OTRLanguageManager translatedString:@"Invite Friends"]; }
/** "Share Invite", Label for inviting friends via URL */
NSString* INVITE_LINK_STRING() { return [OTRLanguageManager translatedString:@"Share Invite"]; }
/** "The XMPP server does not support in-band registration", Error message for when in band registration is not supported */
NSString* IN_BAND_ERROR_STRING() { return [OTRLanguageManager translatedString:@"The XMPP server does not support in-band registration"]; }
/** "Jabber (XMPP)", the name for jabber, also include (XMPP) at the end */
NSString* JABBER_STRING() { return [OTRLanguageManager translatedString:@"Jabber (XMPP)"]; }
/** "Join Group", Text for joining existing XMPP room */
NSString* JOIN_GROUP_STRING() { return [OTRLanguageManager translatedString:@"Join Group"]; }
/** "Knock Sent", Text for label after knock is sent. Like knocking on a door */
NSString* KNOCK_SENT_STRING() { return [OTRLanguageManager translatedString:@"Knock Sent"]; }
/** "Knock", Label for button after to send push notification knock. Like knocking on a door */
NSString* KNOCK_STRING() { return [OTRLanguageManager translatedString:@"Knock"]; }
/** "Language", string to bring up language selector */
NSString* LANGUAGE_STRING() { return [OTRLanguageManager translatedString:@"Language"]; }
/** "Login Automatically", Label for account setting that autologins on launch */
NSString* LOGIN_AUTOMATICALLY_STRING() { return [OTRLanguageManager translatedString:@"Login Automatically"]; }
/** "Log In", log in to account */
NSString* LOGIN_STRING() { return [OTRLanguageManager translatedString:@"Log In"]; }
/** "Log Out", log out from account */
NSString* LOGOUT_STRING() { return [OTRLanguageManager translatedString:@"Log Out"]; }
/** "Manage ChatSecure Push account", Title for button to manage ChatSecure Push account */
NSString* MANAGE_CHATSECURE_PUSH_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Manage ChatSecure Push account"]; }
/** "Manage Debug Logs", Manage the device logs */
NSString* MANAGE_DEBUG_LOGS_STRING() { return [OTRLanguageManager translatedString:@"Manage Debug Logs"]; }
/** "Manage My Keys", Button to manage your OTR and OMEMO keys */
NSString* MANAGE_MY_KEYS() { return [OTRLanguageManager translatedString:@"Manage My Keys"]; }
/** "Maybe Later", button to do something later */
NSString* MAYBE_LATER_STRING() { return [OTRLanguageManager translatedString:@"Maybe Later"]; }
/** "The message could not be sent because this contact cannot receive your messages at this time. This could occur because they are offline, or if you are not authorized to send them messages.", Explanation for why a message could not be sent. */
NSString* MESSAGE_COULD_NOT_BE_SENT_STRING() { return [OTRLanguageManager translatedString:@"The message could not be sent because this contact cannot receive your messages at this time. This could occur because they are offline, or if you are not authorized to send them messages."]; }
/** "Notify Contacts of New Account", Title for toggle switch to spam your friends with your new account info */
NSString* MESSAGE_FRIENDS_WITH_NEW_INFO_STRING() { return [OTRLanguageManager translatedString:@"Notify Contacts of New Account"]; }
/** "Ignore", Button to ignore the migrated buddy warning */
NSString* MIGRATED_BUDDY_IGNORE() { return [OTRLanguageManager translatedString:@"Ignore"]; }
/** "Your buddy has a different forwarding address than the jid you are currently chatting with. Do you want to switch to this account instead?", Explanation that buddy has a different prefered jid in the vcard */
NSString* MIGRATED_BUDDY_INFO_STRING() { return [OTRLanguageManager translatedString:@"Your buddy has a different forwarding address than the jid you are currently chatting with. Do you want to switch to this account instead?"]; }
/** "Buddy has moved!", Title for migrated buddy header view */
NSString* MIGRATED_BUDDY_STRING() { return [OTRLanguageManager translatedString:@"Buddy has moved!"]; }
/** "Switch", Button to switch the chat over to the migrated account */
NSString* MIGRATED_BUDDY_SWITCH() { return [OTRLanguageManager translatedString:@"Switch"]; }
/** "Migrate Account", Title for button to start migration tool */
NSString* MIGRATE_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"Migrate Account"]; }
/** "We will automatically migrate your contacts from your old account to the new one, and archive your old conversations.\n\nIf you'd like, we can also notify your existing contacts that your account has moved.", Description detail text for account migration form */
NSString* MIGRATION_FORM_DETAIL_STRING() { return [OTRLanguageManager translatedString:@"We will automatically migrate your contacts from your old account to the new one, and archive your old conversations.\n\nIf you'd like, we can also notify your existing contacts that your account has moved."]; }
/** "Your account currently lives on the %1$@ servers. That chat service is no longer in service, so we're going to help move your account to a new server.", Explanation for why migration is needed */
NSString* MIGRATION_INFO_STRING() { return [OTRLanguageManager translatedString:@"Your account currently lives on the %1$@ servers. That chat service is no longer in service, so we're going to help move your account to a new server."]; }
/** "Your account currently lives on the %1$@ servers. That chat service is closing on %2$@, so we're going to help move your account to a new server.", Explanation for why migration is needed, contains a shutdown date */
NSString* MIGRATION_INFO_WITH_DATE_STRING() { return [OTRLanguageManager translatedString:@"Your account currently lives on the %1$@ servers. That chat service is closing on %2$@, so we're going to help move your account to a new server."]; }
/** "Your account has expired.", Explanation that your account has expired and you need to migrate */
NSString* MIGRATION_NOTIFICATION_STRING() { return [OTRLanguageManager translatedString:@"Your account has expired."]; }
/** "Your account is expiring in '%1$d' days.", Explanation that your account has expired and you need to migrate, contains a shutdown date */
NSString* MIGRATION_NOTIFICATION_WITH_DATE_STRING() { return [OTRLanguageManager translatedString:@"Your account is expiring in '%1$d' days."]; }
/** "Get Started", Title for button to start migration tool */
NSString* MIGRATION_START_STRING() { return [OTRLanguageManager translatedString:@"Get Started"]; }
/** "It's time to move!", Title for migration header view */
NSString* MIGRATION_STRING() { return [OTRLanguageManager translatedString:@"It's time to move!"]; }
/** "More Ways to Help", button for additional ways to help support development of the app */
NSString* MORE_WAYS_TO_HELP_STRING() { return [OTRLanguageManager translatedString:@"More Ways to Help"]; }
/** "My new account information", label for new account info for migration */
NSString* MY_NEW_ACCOUNT_INFO_STRING() { return [OTRLanguageManager translatedString:@"My new account information"]; }
/** "My QR Code", Your QR code */
NSString* MY_QR_CODE() { return [OTRLanguageManager translatedString:@"My QR Code"]; }
/** "Me",  */
NSString* Me_String() { return [OTRLanguageManager translatedString:@"Me"]; }
/** "Microphone Disabled", microphone permission is disabled */
NSString* Microphone_Disabled() { return [OTRLanguageManager translatedString:@"Microphone Disabled"]; }
/** "To use this feature you must re-enable microphone permissions.", microphone permission is disabled */
NSString* Microphone_Reenable_Please() { return [OTRLanguageManager translatedString:@"To use this feature you must re-enable microphone permissions."]; }
/** "Name", The string describing a buddy's display name */
NSString* NAME_STRING() { return [OTRLanguageManager translatedString:@"Name"]; }
/** "New Account", Title for New Account View */
NSString* NEW_ACCOUNT_STRING() { return [OTRLanguageManager translatedString:@"New Account"]; }
/** "New SSL Certificate", Title for alert when a new SSL certificate is encountered */
NSString* NEW_CERTIFICATE_STRING() { return [OTRLanguageManager translatedString:@"New SSL Certificate"]; }
/** "New Message!", when a new message notification is received */
NSString* NEW_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"New Message!"]; }
/** "New", For a new settings value */
NSString* NEW_STRING() { return [OTRLanguageManager translatedString:@"New"]; }
/** "Next", Label for button to go to next step */
NSString* NEXT_STRING() { return [OTRLanguageManager translatedString:@"Next"]; }
/** "Notifications", Label for notifications switch */
NSString* NOTIFICATIONS_STRING() { return [OTRLanguageManager translatedString:@"Notifications"]; }
/** "We could not find any trusted devices for this account.", Error message for not finding any devices */
NSString* NO_DEVICES_ACCOUNT_ERROR_STRING() { return [OTRLanguageManager translatedString:@"We could not find any trusted devices for this account."]; }
/** "We could not find any trusted devices for this contact.", Error message for not finding any devices */
NSString* NO_DEVICES_BUDDY_ERROR_STRING() { return [OTRLanguageManager translatedString:@"We could not find any trusted devices for this contact."]; }
/** "No HTTP upload servers found.", Error string for when there are no XEP-0363 upload servers. */
NSString* NO_HTTP_UPLOAD_SERVERS_STRING() { return [OTRLanguageManager translatedString:@"No HTTP upload servers found."]; }
/** "Nickname", for choosing your XMPP vCard display name */
NSString* Nickname_String() { return [OTRLanguageManager translatedString:@"Nickname"]; }
/** "Offline", Label in buddy list for users that are offline */
NSString* OFFLINE_STRING() { return [OTRLanguageManager translatedString:@"Offline"]; }
/** "OK", Accept the dialog */
NSString* OK_STRING() { return [OTRLanguageManager translatedString:@"OK"]; }
/** "Old", For an old settings value */
NSString* OLD_STRING() { return [OTRLanguageManager translatedString:@"Old"]; }
/** "Note: this does not automatically enable group encryption. It must also be manually enabled on a per-group basis.", toggling switch detail for showing OMEMO group encryption */
NSString* OMEMO_GROUP_ENCRYPTION_DETAIL_STRING() { return [OTRLanguageManager translatedString:@"Note: this does not automatically enable group encryption. It must also be manually enabled on a per-group basis."]; }
/** "OMEMO Group Encryption", For an old settings value */
NSString* OMEMO_GROUP_ENCRYPTION_STRING() { return [OTRLanguageManager translatedString:@"OMEMO Group Encryption"]; }
/** "You're ready to use", String used when onboarding works */
NSString* ONBOARDING_SUCCESS_STRING() { return [OTRLanguageManager translatedString:@"You're ready to use"]; }
/** "Open in Chrome", Label to open link in the chrome web browser */
NSString* OPEN_IN_CHROME() { return [OTRLanguageManager translatedString:@"Open in Chrome"]; }
/** "Open in Facebook", Label for button to open link in facebook app */
NSString* OPEN_IN_FACEBOOK_STRING() { return [OTRLanguageManager translatedString:@"Open in Facebook"]; }
/** "Open in Safari", Label to open link in the Safari web browser */
NSString* OPEN_IN_SAFARI() { return [OTRLanguageManager translatedString:@"Open in Safari"]; }
/** "Open in Twitter", Label for button to open link in twitter app */
NSString* OPEN_IN_TWITTER_STRING() { return [OTRLanguageManager translatedString:@"Open in Twitter"]; }
/** "Optional", Hint text for domain field telling user this field is not required */
NSString* OPTIONAL_STRING() { return [OTRLanguageManager translatedString:@"Optional"]; }
/** "Other", Title for other miscellaneous settings group */
NSString* OTHER_STRING() { return [OTRLanguageManager translatedString:@"Other"]; }
/** "Message has not been sent because our buddy has ended the private conversation. We should either close the connection, or refresh it.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_CONNECTION_ENDED_STRING() { return [OTRLanguageManager translatedString:@"Message has not been sent because our buddy has ended the private conversation. We should either close the connection, or refresh it."]; }
/** "An error occured while encrypting a message and the message was not sent.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_ENCRYPTION_ERROR_STRING() { return [OTRLanguageManager translatedString:@"An error occured while encrypting a message and the message was not sent."]; }
/** "Our policy requires encryption but we are trying to send an unencrypted message out.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_ENCRYPTION_REQUIRED_STRING() { return [OTRLanguageManager translatedString:@"Our policy requires encryption but we are trying to send an unencrypted message out."]; }
/** "Received a heartbeat.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_LOG_HEARTBEAT_RCVD_STRING() { return [OTRLanguageManager translatedString:@"Received a heartbeat."]; }
/** "Sent a heartbeat.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_LOG_HEARTBEAT_SENT_STRING() { return [OTRLanguageManager translatedString:@"Sent a heartbeat."]; }
/** "Received our own OTR messages.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_MSG_REFLECTED_STRING() { return [OTRLanguageManager translatedString:@"Received our own OTR messages."]; }
/** "The previous message was resent.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_MSG_RESENT_STRING() { return [OTRLanguageManager translatedString:@"The previous message was resent."]; }
/** "Received and discarded a message intended for another instance.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_FOR_OTHER_INSTANCE_STRING() { return [OTRLanguageManager translatedString:@"Received and discarded a message intended for another instance."]; }
/** "Received a general OTR error.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_GENERAL_ERR_STRING() { return [OTRLanguageManager translatedString:@"Received a general OTR error."]; }
/** "The message received contains malformed data.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_MALFORMED_STRING() { return [OTRLanguageManager translatedString:@"The message received contains malformed data."]; }
/** "Received an encrypted message but cannot read it because no private connection is established yet.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_NOT_IN_PRIVATE_STRING() { return [OTRLanguageManager translatedString:@"Received an encrypted message but cannot read it because no private connection is established yet."]; }
/** "Received an unencrypted message.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_UNENCRYPTED_STRING() { return [OTRLanguageManager translatedString:@"Received an unencrypted message."]; }
/** "Cannot read the received message.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_UNREADABLE_STRING() { return [OTRLanguageManager translatedString:@"Cannot read the received message."]; }
/** "Cannot recognize the type of OTR message received.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_RCVDMSG_UNRECOGNIZED_STRING() { return [OTRLanguageManager translatedString:@"Cannot recognize the type of OTR message received."]; }
/** "A private conversation could not be set up.", Error string for OTR message string */
NSString* OTRL_MSGEVENT_SETUP_ERROR_STRING() { return [OTRLanguageManager translatedString:@"A private conversation could not be set up."]; }
/** "Password", Label text for password field on login screen */
NSString* PASSWORD_STRING() { return [OTRLanguageManager translatedString:@"Password"]; }
/** "This device doesn't seem to be configured to make payments.", Error message when trying to make a purchase but payments haven't been set up yet */
NSString* PAYMENTS_SETUP_ERROR_STRING() { return [OTRLanguageManager translatedString:@"This device doesn't seem to be configured to make payments."]; }
/** "Payments Unavailable", Title for alert when user isn't allowed to make payments */
NSString* PAYMENTS_UNAVAILABLE_STRING() { return [OTRLanguageManager translatedString:@"Payments Unavailable"]; }
/** "Pending Approval", String for XMPP buddies when adding buddy is pending */
NSString* PENDING_APPROVAL_STRING() { return [OTRLanguageManager translatedString:@"Pending Approval"]; }
/** "Photo Library", Label for button to open up photo library and choose photo */
NSString* PHOTO_LIBRARY_STRING() { return [OTRLanguageManager translatedString:@"Photo Library"]; }
/** "Picture Message", Text for media message summary */
NSString* PICTURE_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Picture Message"]; }
/** "Manage saved SSL certificates", subtitle for the certificate pinned setting */
NSString* PINNED_CERTIFICATES_DESCRIPTION_STRING() { return [OTRLanguageManager translatedString:@"Manage saved SSL certificates"]; }
/** "Pinned Certificates", Button Lable to show all pinned SSL certificates */
NSString* PINNED_CERTIFICATES_STRING() { return [OTRLanguageManager translatedString:@"Pinned Certificates"]; }
/** "Please contact your server administrator.", Error string for when there is a server configuration error. */
NSString* PLEASE_CONTACT_SERVER_OP_STRING() { return [OTRLanguageManager translatedString:@"Please contact your server administrator."]; }
/** "Port", Label for port number field for connecting to service */
NSString* PORT_STRING() { return [OTRLanguageManager translatedString:@"Port"]; }
/** "Could not retrieve public key from certificate", Error message when cannot get public key from SSL certificate */
NSString* PUBLIC_KEY_ERROR_STRING() { return [OTRLanguageManager translatedString:@"Could not retrieve public key from certificate"]; }
/** "Push", Title for push-messaging related settings */
NSString* PUSH_TITLE_STRING() { return [OTRLanguageManager translatedString:@"Push"]; }
/** "Push Warning", Button title to show more information about Push messaging might not be working */
NSString* PUSH_WARNING_STRING() { return [OTRLanguageManager translatedString:@"Push Warning"]; }
/** "Plaintext Only",  */
NSString* Plaintext_Only() { return [OTRLanguageManager translatedString:@"Plaintext Only"]; }
/** "Plaintext (Opportunistic OTR)",  */
NSString* Plaintext_Opportunistic_OTR() { return [OTRLanguageManager translatedString:@"Plaintext (Opportunistic OTR)"]; }
/** "Profile", title for contacts profile view */
NSString* Profile_String() { return [OTRLanguageManager translatedString:@"Profile"]; }
/** "QR code", Label for qr code image */
NSString* QR_CODE_STRING() { return [OTRLanguageManager translatedString:@"QR code"]; }
/** "Recent", Title for header of Buddy list view with Recent Buddies */
NSString* RECENT_STRING() { return [OTRLanguageManager translatedString:@"Recent"]; }
/** "Reject", Button title to reject a request such as a buddy request */
NSString* REJECT_STRING() { return [OTRLanguageManager translatedString:@"Reject"]; }
/** "Release to delete", Label for instruction to delete current recording */
NSString* RELEASE_TO_DELETE_STRING() { return [OTRLanguageManager translatedString:@"Release to delete"]; }
/** "Release to send", Label for instruction to send current audio */
NSString* RELEASE_TO_SEND_STRING() { return [OTRLanguageManager translatedString:@"Release to send"]; }
/** "Your password will be stored in the iOS Keychain of this device only, and is only as safe as your device passphrase or pin. However, it will not persist during a device backup/restore via iTunes, so please don't forget it, or you may lose your conversation history.", Text that describes what remembering your passphrase does */
NSString* REMEMBER_PASSPHRASE_INFO_STRING() { return [OTRLanguageManager translatedString:@"Your password will be stored in the iOS Keychain of this device only, and is only as safe as your device passphrase or pin. However, it will not persist during a device backup/restore via iTunes, so please don't forget it, or you may lose your conversation history."]; }
/** "Remember Passphrase", Label for switch to save passphrase */
NSString* REMEMBER_PASSPHRASE_STRING() { return [OTRLanguageManager translatedString:@"Remember Passphrase"]; }
/** "Remember password", label for switch for whether or not we should save their password between launches */
NSString* REMEMBER_PASSWORD_STRING() { return [OTRLanguageManager translatedString:@"Remember password"]; }
/** "Remove", The String for a button to remove a buddy from the buddy list */
NSString* REMOVE_STRING() { return [OTRLanguageManager translatedString:@"Remove"]; }
/** "Reply", Reply to an incoming message */
NSString* REPLY_STRING() { return [OTRLanguageManager translatedString:@"Reply"]; }
/** "Required", String to let user know a certain field like a password is required to create an account */
NSString* REQUIRED_STRING() { return [OTRLanguageManager translatedString:@"Required"]; }
/** "Resending this message will use %@.", Describe what resending will do the %@ will be replaced withe the method OTR/OMEMO/Plaintext */
NSString* RESEND_DESCRIPTION_STRING() { return [OTRLanguageManager translatedString:@"Resending this message will use %@."]; }
/** "Resend Message", Ttitle for alert view to resend a message */
NSString* RESEND_MESSAGE_TITLE() { return [OTRLanguageManager translatedString:@"Resend Message"]; }
/** "Resend", Label for button to resend message. */
NSString* RESEND_STRING() { return [OTRLanguageManager translatedString:@"Resend"]; }
/** "Reset", e.g. for resetting push account */
NSString* RESET_STRING() { return [OTRLanguageManager translatedString:@"Reset"]; }
/** "Resource", Label for text input for XMPP resource */
NSString* RESOURCE_STRING() { return [OTRLanguageManager translatedString:@"Resource"]; }
/** "Removed By Server",  */
NSString* Removed_By_Server() { return [OTRLanguageManager translatedString:@"Removed By Server"]; }
/** "Saved Certificates", Title for listing the user saved SSL certificates */
NSString* SAVED_CERTIFICATES_STRING() { return [OTRLanguageManager translatedString:@"Saved Certificates"]; }
/** "Save", Title for button for saving a setting */
NSString* SAVE_STRING() { return [OTRLanguageManager translatedString:@"Save"]; }
/** "Scan QR", Label for sharing via QR Code */
NSString* SCAN_QR_STRING() { return [OTRLanguageManager translatedString:@"Scan QR"]; }
/** "Search", Label for text field where you search for a buddy */
NSString* SEARCH_STRING() { return [OTRLanguageManager translatedString:@"Search"]; }
/** "Security", Title heading in settings */
NSString* SECURITY_STRING() { return [OTRLanguageManager translatedString:@"Security"]; }
/** "Security Warning", Title of alert box warning about security issues */
NSString* SECURITY_WARNING_STRING() { return [OTRLanguageManager translatedString:@"Security Warning"]; }
/** "Sending", Label text for when a transfer is in progress (normally followed by a percent value 34%) */
NSString* SENDING_STRING() { return [OTRLanguageManager translatedString:@"Sending"]; }
/** "Send %@ encrypted message", The placeholder text in the chat view where the message should go */
NSString* SEND_ENCRYPTED_STRING() { return [OTRLanguageManager translatedString:@"Send %@ encrypted message"]; }
/** "Send Feedback", String on button to email feedback */
NSString* SEND_FEEDBACK_STRING() { return [OTRLanguageManager translatedString:@"Send Feedback"]; }
/** "Send plaintext message", The placeholder text in the chat view where the message should go */
NSString* SEND_PLAINTEXT_STRING() { return [OTRLanguageManager translatedString:@"Send plaintext message"]; }
/** "Server Information", button to show more information about your XMPP server */
NSString* SERVER_INFORMATION_STRING() { return [OTRLanguageManager translatedString:@"Server Information"]; }
/** "Settings", Title for the Settings screen */
NSString* SETTINGS_STRING() { return [OTRLanguageManager translatedString:@"Settings"]; }
/** "Chat with me securely", Body of SMS or email when sharing a link to the app */
NSString* SHARE_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Chat with me securely"]; }
/** "Share", Title for sharing a link to the app */
NSString* SHARE_STRING() { return [OTRLanguageManager translatedString:@"Share"]; }
/** "Show Console", button label for showing log console */
NSString* SHOW_CONSOLE_STRING() { return [OTRLanguageManager translatedString:@"Show Console"]; }
/** "Would you like to connect to UserVoice to send feedback?", actionsheet for showing uservoice feedback service */
NSString* SHOW_USERVOICE_STRING() { return [OTRLanguageManager translatedString:@"Would you like to connect to UserVoice to send feedback?"]; }
/** "Sign Up", title label for signing up for a new account */
NSString* SIGN_UP_STRING() { return [OTRLanguageManager translatedString:@"Sign Up"]; }
/** "Skip", Label for button to skip this step */
NSString* SKIP_STRING() { return [OTRLanguageManager translatedString:@"Skip"]; }
/** "Someone is typing...", received a typing notification */
NSString* SOMEONE_IS_TYPING_STRING() { return [OTRLanguageManager translatedString:@"Someone is typing..."]; }
/** "Someone", A placeholder for a buddy's username like Someone wants to chat. */
NSString* SOMEONE_STRING() { return [OTRLanguageManager translatedString:@"Someone"]; }
/** "Check out the source here on Github", let users know source is on Github */
NSString* SOURCE_STRING() { return [OTRLanguageManager translatedString:@"Check out the source here on Github"]; }
/** "Server", server selection section title */
NSString* Server_String() { return [OTRLanguageManager translatedString:@"Server"]; }
/** "Choose from a selection of public servers, or use your own.", server selection footer */
NSString* Server_String_Hint() { return [OTRLanguageManager translatedString:@"Choose from a selection of public servers, or use your own."]; }
/** "Show Advanced Encryption Settings",  */
NSString* Show_Advanced_Encryption_Settings() { return [OTRLanguageManager translatedString:@"Show Advanced Encryption Settings"]; }
/** "Show Advanced Options", toggle switch for show advanced */
NSString* Show_Advanced_Options() { return [OTRLanguageManager translatedString:@"Show Advanced Options"]; }
/** "Thank you for your contribution!", string shown if user has already paid */
NSString* THANK_YOU_FOR_CONTRIBUTION() { return [OTRLanguageManager translatedString:@"Thank you for your contribution!"]; }
/** "Tor is an experimental feature, please use with caution.", Message for warning about using tor network */
NSString* TOR_WARNING_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Tor is an experimental feature, please use with caution."]; }
/** "Twitter", Name of the popular social tweeting site */
NSString* TWITTER_STRING() { return [OTRLanguageManager translatedString:@"Twitter"]; }
/** "Unable to Send Message", Title for error message */
NSString* UNABLE_TO_SEND_STRING() { return [OTRLanguageManager translatedString:@"Unable to Send Message"]; }
/** "Unarchive", Verb. action for moving archived converation back to inbox */
NSString* UNARCHIVE_ACTION_STRING() { return [OTRLanguageManager translatedString:@"Unarchive"]; }
/** "plaintext", Label for messages that are not encrypted */
NSString* UNENCRYPTED_STRING() { return [OTRLanguageManager translatedString:@"plaintext"]; }
/** "Unknown Error", Describes an error without a known cause */
NSString* UNKNOWN_ERROR_STRING() { return [OTRLanguageManager translatedString:@"Unknown Error"]; }
/** "Unlock", Label for button to unlock app */
NSString* UNLOCK_STRING() { return [OTRLanguageManager translatedString:@"Unlock"]; }
/** "This message was received from an untrusted device.", Error message description */
NSString* UNTRUSTED_DEVICE_REVEIVED_STRING() { return [OTRLanguageManager translatedString:@"This message was received from an untrusted device."]; }
/** "This message was sent to an untrusted device.", Error message description */
NSString* UNTRUSTED_DEVICE_SENT_STRING() { return [OTRLanguageManager translatedString:@"This message was sent to an untrusted device."]; }
/** "Untrusted Device", Title for error message */
NSString* UNTRUSTED_DEVICE_STRING() { return [OTRLanguageManager translatedString:@"Untrusted Device"]; }
/** "Username", Label text for username field on login screen */
NSString* USERNAME_STRING() { return [OTRLanguageManager translatedString:@"Username"]; }
/** "Canceled", Describes a state entered by user cancelation */
NSString* USER_CANCELED_STRING() { return [OTRLanguageManager translatedString:@"Canceled"]; }
/** "Camera", Label for button to take a photo from camera */
NSString* USE_CAMERA_STRING() { return [OTRLanguageManager translatedString:@"Camera"]; }
/** "Unrecognized Invite Format", shown when invite QR code doesnt work */
NSString* Unrecognized_Invite_Format() { return [OTRLanguageManager translatedString:@"Unrecognized Invite Format"]; }
/** "Valid certificate", shown to show that the certificate was valid to the system */
NSString* VALID_CERTIFICATE_STRING() { return [OTRLanguageManager translatedString:@"Valid certificate"]; }
/** "Verified", To let the user know the fingerprint as been checked */
NSString* VERIFIED_STRING() { return [OTRLanguageManager translatedString:@"Verified"]; }
/** "Verify Fingerprint", Title of the dialog for fingerprint verification */
NSString* VERIFY_FINGERPRINT_STRING() { return [OTRLanguageManager translatedString:@"Verify Fingerprint"]; }
/** "Verify", Shown when verifying fingerprints */
NSString* VERIFY_STRING() { return [OTRLanguageManager translatedString:@"Verify"]; }
/** "Version", when displaying version numbers such as 1.0.0 */
NSString* VERSION_STRING() { return [OTRLanguageManager translatedString:@"Version"]; }
/** "Video Message", Text for media message summary */
NSString* VIDEO_MESSAGE_STRING() { return [OTRLanguageManager translatedString:@"Video Message"]; }
/** "View profile to review contact's devices or change encryption settings.", Describe how to change a contact's device settings */
NSString* VIEW_PROFILE_DESCRIPTION_STRING() { return [OTRLanguageManager translatedString:@"View profile to review contact's devices or change encryption settings."]; }
/** "View Profile", The label for a button to view the buddy profile */
NSString* VIEW_PROFILE_STRING() { return [OTRLanguageManager translatedString:@"View Profile"]; }
/** "Waiting", Label text for when a transfer has not started yet */
NSString* WAITING_STRING() { return [OTRLanguageManager translatedString:@"Waiting"]; }
/** "wants to chat.", This string follows a user's dislplay name or username ex Bob wants to chat. */
NSString* WANTS_TO_CHAT_STRING() { return [OTRLanguageManager translatedString:@"wants to chat."]; }
/** "Failed to connect to XMPP server. Please check your login credentials and internet connection and try again.", Message when cannot connect to XMPP server */
NSString* XMPP_FAIL_STRING() { return [OTRLanguageManager translatedString:@"Failed to connect to XMPP server. Please check your login credentials and internet connection and try again."]; }
/** "XMPP + Tor", Title for xmpp accounts that connect through the Tor network */
NSString* XMPP_TOR_STRING() { return [OTRLanguageManager translatedString:@"XMPP + Tor"]; }
/** "user@example.com", Example of a username using the words user and example */
NSString* XMPP_USERNAME_EXAMPLE_STRING() { return [OTRLanguageManager translatedString:@"user@example.com"]; }
/** "Bad certificate format", SSL error message */
NSString* errSSLBadCertString() { return [OTRLanguageManager translatedString:@"Bad certificate format"]; }
/** "Bad SSLCipherSuite", SSL error message */
NSString* errSSLBadCipherSuiteString() { return [OTRLanguageManager translatedString:@"Bad SSLCipherSuite"]; }
/** "Configuration error", SSL error message */
NSString* errSSLBadConfigurationString() { return [OTRLanguageManager translatedString:@"Configuration error"]; }
/** "Bad MAC", SSL error message */
NSString* errSSLBadRecordMacString() { return [OTRLanguageManager translatedString:@"Bad MAC"]; }
/** "Insufficient buffer provided", SSL error message */
NSString* errSSLBufferOverflowString() { return [OTRLanguageManager translatedString:@"Insufficient buffer provided"]; }
/** "Chain had an expired cert", SSL error message */
NSString* errSSLCertExpiredString() { return [OTRLanguageManager translatedString:@"Chain had an expired cert"]; }
/** "Chain had a cert not yet valid", SSL error message */
NSString* errSSLCertNotYetValidString() { return [OTRLanguageManager translatedString:@"Chain had a cert not yet valid"]; }
/** "Server has requested a client cert", SSL error message */
NSString* errSSLClientCertRequestedString() { return [OTRLanguageManager translatedString:@"Server has requested a client cert"]; }
/** "Connection closed via error", SSL error message */
NSString* errSSLClosedAbortString() { return [OTRLanguageManager translatedString:@"Connection closed via error"]; }
/** "Connection closed gracefully", SSL error message */
NSString* errSSLClosedGracefulString() { return [OTRLanguageManager translatedString:@"Connection closed gracefully"]; }
/** "Server closed session with no notification", SSL error message */
NSString* errSSLClosedNoNotifyString() { return [OTRLanguageManager translatedString:@"Server closed session with no notification"]; }
/** "Peer dropped connection before responding", SSL error message */
NSString* errSSLConnectionRefusedString() { return [OTRLanguageManager translatedString:@"Peer dropped connection before responding"]; }
/** "Underlying cryptographic error", SSL error message */
NSString* errSSLCryptoString() { return [OTRLanguageManager translatedString:@"Underlying cryptographic error"]; }
/** "Decryption failure", SSL error message */
NSString* errSSLDecryptionFailString() { return [OTRLanguageManager translatedString:@"Decryption failure"]; }
/** "Fatal alert", SSL error message */
NSString* errSSLFatalAlertString() { return [OTRLanguageManager translatedString:@"Fatal alert"]; }
/** "Peer host name mismatch", SSL error message */
NSString* errSSLHostNameMismatchString() { return [OTRLanguageManager translatedString:@"Peer host name mismatch"]; }
/** "Illegal parameter", SSL error message */
NSString* errSSLIllegalParamString() { return [OTRLanguageManager translatedString:@"Illegal parameter"]; }
/** "Internal error", SSL error message */
NSString* errSSLInternalString() { return [OTRLanguageManager translatedString:@"Internal error"]; }
/** "Module attach failure", SSL error message */
NSString* errSSLModuleAttachString() { return [OTRLanguageManager translatedString:@"Module attach failure"]; }
/** "Cipher Suite negotiation failure", SSL error message */
NSString* errSSLNegotiationString() { return [OTRLanguageManager translatedString:@"Cipher Suite negotiation failure"]; }
/** "Cert chain not verified by root", SSL error message */
NSString* errSSLNoRootCertString() { return [OTRLanguageManager translatedString:@"Cert chain not verified by root"]; }
/** "Access denied", SSL error message */
NSString* errSSLPeerAccessDeniedString() { return [OTRLanguageManager translatedString:@"Access denied"]; }
/** "Peer cert is valid, or was ignored if verification disabled", SSL error message */
NSString* errSSLPeerAuthCompletedString() { return [OTRLanguageManager translatedString:@"Peer cert is valid, or was ignored if verification disabled"]; }
/** "Miscellaneous bad certificate", SSL error message */
NSString* errSSLPeerBadCertString() { return [OTRLanguageManager translatedString:@"Miscellaneous bad certificate"]; }
/** "Bad MAC", SSL error message */
NSString* errSSLPeerBadRecordMacString() { return [OTRLanguageManager translatedString:@"Bad MAC"]; }
/** "Certificate expired", SSL error message */
NSString* errSSLPeerCertExpiredString() { return [OTRLanguageManager translatedString:@"Certificate expired"]; }
/** "Certificate revoked", SSL error message */
NSString* errSSLPeerCertRevokedString() { return [OTRLanguageManager translatedString:@"Certificate revoked"]; }
/** "Unknown certificate", SSL error message */
NSString* errSSLPeerCertUnknownString() { return [OTRLanguageManager translatedString:@"Unknown certificate"]; }
/** "Decoding error", SSL error message */
NSString* errSSLPeerDecodeErrorString() { return [OTRLanguageManager translatedString:@"Decoding error"]; }
/** "Decompression failure", SSL error message */
NSString* errSSLPeerDecompressFailString() { return [OTRLanguageManager translatedString:@"Decompression failure"]; }
/** "Decryption error", SSL error message */
NSString* errSSLPeerDecryptErrorString() { return [OTRLanguageManager translatedString:@"Decryption error"]; }
/** "Decryption failed", SSL error message */
NSString* errSSLPeerDecryptionFailString() { return [OTRLanguageManager translatedString:@"Decryption failed"]; }
/** "Export restriction", SSL error message */
NSString* errSSLPeerExportRestrictionString() { return [OTRLanguageManager translatedString:@"Export restriction"]; }
/** "Handshake failure", SSL error message */
NSString* errSSLPeerHandshakeFailString() { return [OTRLanguageManager translatedString:@"Handshake failure"]; }
/** "Insufficient security", SSL error message */
NSString* errSSLPeerInsufficientSecurityString() { return [OTRLanguageManager translatedString:@"Insufficient security"]; }
/** "Internal error", SSL error message */
NSString* errSSLPeerInternalErrorString() { return [OTRLanguageManager translatedString:@"Internal error"]; }
/** "No renegotiation allowed", SSL error message */
NSString* errSSLPeerNoRenegotiationString() { return [OTRLanguageManager translatedString:@"No renegotiation allowed"]; }
/** "Bad protocol version", SSL error message */
NSString* errSSLPeerProtocolVersionString() { return [OTRLanguageManager translatedString:@"Bad protocol version"]; }
/** "Record overflow", SSL error message */
NSString* errSSLPeerRecordOverflowString() { return [OTRLanguageManager translatedString:@"Record overflow"]; }
/** "Unexpected message received", SSL error message */
NSString* errSSLPeerUnexpectedMsgString() { return [OTRLanguageManager translatedString:@"Unexpected message received"]; }
/** "Unknown Cert Authority", SSL error message */
NSString* errSSLPeerUnknownCAString() { return [OTRLanguageManager translatedString:@"Unknown Cert Authority"]; }
/** "Bad unsupported cert format", SSL error message */
NSString* errSSLPeerUnsupportedCertString() { return [OTRLanguageManager translatedString:@"Bad unsupported cert format"]; }
/** "User canceled", SSL error message */
NSString* errSSLPeerUserCancelledString() { return [OTRLanguageManager translatedString:@"User canceled"]; }
/** "SSL protocol error", SSL error message */
NSString* errSSLProtocolString() { return [OTRLanguageManager translatedString:@"SSL protocol error"]; }
/** "Record overflow", SSL error message */
NSString* errSSLRecordOverflowString() { return [OTRLanguageManager translatedString:@"Record overflow"]; }
/** "Attempt to restore an unknown session", SSL error message */
NSString* errSSLSessionNotFoundString() { return [OTRLanguageManager translatedString:@"Attempt to restore an unknown session"]; }
/** "Unexpected (skipped) record in DTLS", SSL error message */
NSString* errSSLUnexpectedRecordString() { return [OTRLanguageManager translatedString:@"Unexpected (skipped) record in DTLS"]; }
/** "Valid cert chain, untrusted root", SSL error message */
NSString* errSSLUnknownRootCertString() { return [OTRLanguageManager translatedString:@"Valid cert chain, untrusted root"]; }
/** "I/O would block (not fatal)", SSL error message */
NSString* errSSLWouldBlockString() { return [OTRLanguageManager translatedString:@"I/O would block (not fatal)"]; }
/** "Invalid certificate chain", SSL error message */
NSString* errSSLXCertChainInvalidString() { return [OTRLanguageManager translatedString:@"Invalid certificate chain"]; }
/** "No Error", SSL error message */
NSString* noErrString() { return [OTRLanguageManager translatedString:@"No Error"]; }
/** "Default", default string to revert to normal language behaviour */
NSString* DEFAULT_LANGUAGE_STRING() { return NSLocalizedString(@"Default",@"default string to revert to normal language behaviour")
; }
